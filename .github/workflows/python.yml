name: Python

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - Cargo.*
      - python/**
      - rust/**
      - protos/**
      - .github/workflows/python.yml
      - .github/workflows/build_linux_wheel/**
      - .github/workflows/build_mac_wheel/**
      - .github/workflows/run_tests/**

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # This env var is used by Swatinem/rust-cache@v2 for the cache
  # key, so we set it to make sure it is always consistent.
  CARGO_TERM_COLOR: always
  # Disable full debug symbol generation to speed up CI build and keep memory down
  # "1" means line tables only, which is useful for panic tracebacks.
  RUSTFLAGS: "-C debuginfo=line-tables-only"
  RUST_BACKTRACE: "1"
  CI: "true"
  # Color output for pytest is off by default.
  PYTEST_ADDOPTS: "--color=yes"
  FORCE_COLOR: "1"
  # Change this to bust all caches (may be needed periodically if the caches accumulate
  # a lot of cruft).
  CACHE_PREFIX: "2"

jobs:
  linux-build:
    name: Build - Linux x86_64
    timeout-minutes: 30
    runs-on: "ubuntu-24.04"
    defaults:
      run:
        shell: bash
        working-directory: python
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: python
          prefix-key: ${{ env.CACHE_PREFIX }}
          cache-targets: false
          cache-workspace-crates: true
      - uses: ./.github/workflows/build_linux_wheel
      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheel
          path: python/target/wheels/*.whl
          retention-days: 1

  lint:
    timeout-minutes: 30
    runs-on: "ubuntu-24.04"
    defaults:
      run:
        shell: bash
        working-directory: python
    env:
      # Need up-to-date compilers for kernels
      CC: clang-18
      CXX: clang++-18
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11 # Ray does not support 3.12 yet.
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: python
          prefix-key: ${{ env.CACHE_PREFIX }}
          cache-targets: false
          cache-workspace-crates: true
      - name: Install linting tools
        run: |
          pip install ruff==0.11.2 maturin tensorflow tqdm ray[data] pyright datasets polars[pyarrow,pandas]
          pip install torch --index-url https://download.pytorch.org/whl/cpu
      - name: Lint Python
        run: |
          ruff format --check --diff python
          ruff check python
          pyright
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libssl-dev
      - name: Lint Rust
        run: |
          ALL_FEATURES=`cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | .features | keys | .[]' | grep -v protoc | sort | uniq | paste -s -d "," -`
          cargo fmt --all -- --check
          cargo clippy --locked --features ${ALL_FEATURES} --tests -- -D warnings
  linux-test:
    timeout-minutes: 45
    needs: linux-build
    strategy:
      matrix:
        python-minor-version: ["9", "12"]
    name: "Test - Linux 3.${{ matrix.python-minor-version }} x86_64"
    runs-on: "ubuntu-24.04"
    defaults:
      run:
        shell: bash
        working-directory: python
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.${{ matrix.python-minor-version }}
      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-wheel
          path: python/target/wheels
      - uses: ./.github/workflows/run_tests
      - name: Generate forward compatibility files
        run: python python/tests/forward_compat/datagen.py
      - name: Run forward compatibility tests (pylance 0.16.0)
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install pytest pylance==0.16.0
          pytest python/tests/forward_compat --run-forward
      - name: Run forward compatibility tests (pylance 0.29.1.beta2)
        run: |
          source venv/bin/activate
          pip install pytest --pre --extra-index-url https://pypi.fury.io/lancedb/ pylance==0.29.1.beta2
          pytest python/tests/forward_compat --run-forward

  doctest:
    name: Doctest - Linux 3.11 x86_64
    timeout-minutes: 30
    needs: linux-build
    runs-on: "ubuntu-24.04"
    defaults:
      run:
        shell: bash
        working-directory: python
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-wheel
          path: python/target/wheels
      - name: Install dependencies
        run: |
          pip install $(ls target/wheels/pylance-*.whl)[tests,ray]
          pip install torch tqdm --index-url https://download.pytorch.org/whl/cpu
      - name: Run doctest
        run: |
          export LANCE_TEST_DATA_DIR=$(pwd)/python/python/tests
          pytest --doctest-modules --pyargs lance

  linux-arm:
    timeout-minutes: 45
    runs-on: ubuntu-2404-4x-arm64
    name: Build & Test - Linux 3.12 ARM
    defaults:
      run:
        shell: bash
        working-directory: python
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: python
          prefix-key: ${{ env.CACHE_PREFIX }}
          cache-targets: false
          cache-workspace-crates: true
      - uses: ./.github/workflows/build_linux_wheel
        with:
          arm-build: "true"
          manylinux: "2_28"
      - name: Install dependencies
        run: |
          sudo apt update -y -qq
          sudo apt install -y libhdf5-dev
      - uses: ./.github/workflows/run_tests
  mac:
    timeout-minutes: 45
    name: Build & Test - macOS 3.12 ARM
    runs-on: "macos-14"
    defaults:
      run:
        shell: bash
        working-directory: python
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: python
          prefix-key: ${{ env.CACHE_PREFIX }}
          cache-targets: false
          cache-workspace-crates: true
      - uses: ./.github/workflows/build_mac_wheel
      - uses: ./.github/workflows/run_tests
        with:
          skip-torch: "true"

  windows:
    name: Build & Test - Windows x86_64
    runs-on: windows-latest
    timeout-minutes: 90
    defaults:
      run:
        shell: powershell
        working-directory: python
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: python
          prefix-key: ${{ env.CACHE_PREFIX }}
          cache-targets: false
          cache-workspace-crates: true
      - uses: ./.github/workflows/build_windows_wheel
      - uses: ./.github/workflows/run_tests
  aws-integtest:
    timeout-minutes: 45
    needs: linux-build
    runs-on: "ubuntu-latest"
    defaults:
      run:
        shell: bash
        working-directory: python
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # TODO: upgrade when ray supports 3.12
      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-wheel
          path: python/target/wheels
      - name: Install dependencies
        run: |
          pip install ray[data]
          pip install torch --index-url https://download.pytorch.org/whl/cpu
      - uses: ./.github/workflows/run_integtests
