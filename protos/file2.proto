// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: Copyright The Lance Authors
 
syntax = "proto3";

package lance.file.v2;

import "google/protobuf/any.proto";

// # Lance v0.2 File Format
//
// The Lance file format is a barebones format for serializing columnar data
// into a file.
//
// * Each Lance file contains between 0 and 4Gi columns
// * Each column contains between 0 and 4Gi pages
// * Each page contains between 0 and 4Gi items
// * Different pages within a column can have different items counts
// * Columns may have more than 4Gi items, though this will require more than
//   one page
// * Different columns within a file can have different item counts
//
// The Lance file format does not have any notion of a type system or schemas.
// From the perspective of the file format all data is arbitrary buffers of
// bytes with an extensible metadata block to describe the data.  It is up to
// the user to interpret these bytes meaningfully.
//
// Data buffers can be placed in three different places:
//
// * Global data buffers are placed in the file footer.  These should contain
//   data that is common across the file (such as the file schema or a common
//   dictionary)
// * Column metadata buffers are placed in the column metadata block.  These
//   should contain data that is common across all pages within the column.
// * Page data buffers are written in the data pages section of the file.  It
//   is expected that these will contain the vast majority of the file's data.
//
// ## File Layout
//
// Note: the number of pages (PN) is independent of the number of columns (CN)
//       and each page/column can have any number of buffers (Px_N)/(Cx_N)
//       which is determined by the encodings.
//
//       Buffers often need to be aligned.  64-byte alignment is common when
//       working with SIMD operations.  4096-byte alignment is common when
//       working with direct I/O.  In order to ensure these buffers are aligned
//       writers may need to insert padding before the buffers.
//       
//       If direct I/O is required then most (but not all) fields described
//       below must be sector aligned.  We have marked these fields with an
//       asterick for clarity.  Readers should assume there will be optional
//       padding inserted before these fields.
//
//       All footer fields are unsigned integers written with  little endian
//       byte order.
//
// ├──────────────────────────────────┤
// | Data Pages                       |
// |   Page 0, Buffer 0*              |
// |   ...                            |
// |   Page 0, Buffer P0_N*           |
// |   Page 1, Buffer 0*              |
// |   ...                            |
// |   Page PN, Buffer PN_N*          |
// ├──────────────────────────────────┤
// | Column Metadatas                 |
// | |A| Column 0 Metadata*           |
// |     Column 0 Meta Buffer 0*      |
// |     ...                          |
// |     Column 0 Meta Buffer C0_N*   |
// |     Column 1 Metadata*           |
// |     ...                          |
// |     Column CN Meta Buffer CN_N*  |
// ├──────────────────────────────────┤
// | Column Metadata Offset Table     |
// | |B| Column 0 Metadata Position*  |
// |     Column 0 Metadata Size       |
// |     ...                          |
// |     Column CN Metadata Position  |
// |     Column CN Metadata Size      |
// ├──────────────────────────────────┤
// | Global Buffers                   |
// | |C| Global Meta Buffer 0*        |
// |     ...                          |
// |     Global Meta Buffer GN*       |
// ├──────────────────────────────────┤
// | Global Buffers Offset Table      |
// | |D| Global Buffer 0 Position*    |
// |     Global Buffer 0 Size         |
// |     ...                          |
// |     Global Buffer GN Position    |
// |     Global Buffer GN Size        |
// ├──────────────────────────────────┤
// | Footer                           |
// | A u64: Offset to C0 metadata     |
// | B u64: Offset to CMO table       |
// | C u64: Offset to global buf 0    |
// | D u64: Offset to GBO table       |
// |   u32: Number of global bufs     |
// |   u32: Number of columns         |
// |   u16: Major version             |
// |   u16: Minor version             |
// |   "LANC"                         |
// ├──────────────────────────────────┤
//
//
// ## Encodings
//
// Specific encodings are not part of this minimal format.  They are provided
// by extensions. Readers and writers should be designed so that encodings can
// be easily added and removed. Ideally, they should allow for this without
// requiring recompilation through some kind of plugin system.

// The deferred encoding is used to place the encoding itself in a different
// part of the file.  This is most commonly used to allow encodings to be shared
// across different columns.  For example, when writing a file with thousands of
// columns, where many pages have the exact same encoding, it can be useful
// to cut down on the size of the metadata by using a deferred encoding.
message DeferredEncoding {
   // Location of the buffer containing the encoding.
   //
   // This buffer will contain a protobuf encoded `DirectEncoding` message.
   //
   // * If sharing encodings across columns then this will be in a global buffer
   // * If sharing encodings across pages within a column this could be in a
   //   column metadata buffer.
   // * This format doesn't prevent this from being a page buffer.  However, that
   //   would mean the reader needs to do an extra IOP before it can even begin
   //   decoding the page and we don't imagine this being useful.
   uint64 buffer_location = 1;
   uint64 buffer_length = 2;
}

// Speicifc encodings are not part of the minimal file format.  They are stored
// as google.protobuf.Any and should be provided by extensions.
message DirectEncoding {
    // The encoding
    google.protobuf.Any encoding = 1;
}

message Encoding {
    oneof style {
        // The encoding is stored elsewhere and not part of this protobuf message
        DeferredEncoding deferred = 1;
        // The encoding is stored within this protobuf message
        DirectEncoding direct = 2;
    }
}

// ## Metadata

// Each column has a metadata block that is placed at the end of the file.
// These may be read individually to allow for column projection.
message ColumnMetadata {

  // This describes a page of column data.
  message Page {
    // The file offsets for each of the page buffers
    //
    // The number of buffers is variable and depends on the encoding.  There
    // may be zero buffers (e.g. constant encoded data) in which case this
    // could be empty.
    repeated uint64 buffer_offsets = 1;
    // The size (in bytes) of each of the page buffers
    //
    // This field will have the same length as `buffer_offsets` and
    // may be empty.
    repeated uint64 buffer_sizes = 2;
    // Logical length (e.g. # rows) of the page
    uint32 length = 3;
    // The encoding used to encode the page
    Encoding encoding = 4;
  }
  // The pages in the column
  repeated Page pages = 1;   
  // The file offsets of each of the column metadata buffers
  //
  // There may be zero buffers.
  repeated uint64 buffer_offsets = 2;
  // The size (in bytes) of each of the column metadata buffers
  //
  // This field will have the same length as `buffer_offsets` and
  // may be empty.
  repeated uint64 buffer_sizes = 3;
}

// ## Where is the rest?
//
// This file format is extremely minimal.  It is a building block for
// creating more useful readers and writers and not terribly useful by itself.
// Other protobuf files will describe how this can be extended.