# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Copyright The Lance Authors

# Forward compatibility tests for older versions of Lance
#
# This file will be run on older versions of Lance to test that the
# current version of Lance can read the test data generated by datagen.py.

import lance
import pyarrow as pa
import pyarrow.compute as pc
import pytest
from lance.file import LanceFileReader
from packaging.version import Version

from .util import build_basic_types, build_large, get_path


@pytest.mark.forward
@pytest.mark.skipif(
    Version(lance.__version__) < Version("0.36.0"),  # at least 0.36.0
    reason="version is too old to support JSON index",
)
def test_json_index():
    ds = lance.dataset(get_path("json"))
    tbl = ds.to_table(filter="json_get_int(json, 'val') == 7")
    assert tbl.num_rows == 1
    assert tbl.column("idx").to_pylist() == [7]

    explain = ds.scanner(filter="json_get_int(json, 'val') == 7").explain_plan()
    assert "ScalarIndexQuery" in explain


@pytest.mark.forward
@pytest.mark.skipif(
    Version(lance.__version__) < Version("0.36.0"),  # at least 0.36.0
    reason="version is too old to support NGRAM index",
)
def test_ngram_index():
    ds = lance.dataset(get_path("scalar_index"))
    tbl = ds.to_table(filter="contains(ngram, 'word7')")
    assert tbl.num_rows == 111

    explain = ds.scanner(filter="contains(ngram, 'word7')").explain_plan()
    assert "ScalarIndexQuery" in explain


@pytest.mark.forward
@pytest.mark.forward
@pytest.mark.skipif(
    Version(lance.__version__) < Version("0.20.0"),
    reason="Version is too old to read index files stored with Lance 2.0 file format",
)
def test_index_search():
    ds = lance.dataset(get_path("scalar_index"))

    def query_seven(filt: str):
        table = ds.to_table(filter=filt)
        assert table.num_rows == 1
        assert table.column("idx").to_pylist() == [7]

        explain = ds.scanner(filter=filt).explain_plan()
        print(explain)
        assert "ScalarIndexQuery" in explain or "MaterializeIndex" in explain

    query_seven("btree == 7")
    query_seven("bitmap == 7")
    query_seven("array_has_any(label_list, ['label7'])")
    if Version(lance.__version__) >= Version("0.36.0"):
        # Older lance versions didn't support these indexes
        query_seven("zonemap == 7")
        query_seven("bloomfilter == 7")


@pytest.mark.forward
def test_scans():
    expected_basic_types = build_basic_types()
    actual_basic_types = (
        LanceFileReader(str(get_path("basic_types.lance"))).read_all().to_table()
    )
    assert actual_basic_types.equals(expected_basic_types)

    expected_large = build_large()
    actual_large = LanceFileReader(str(get_path("large.lance"))).read_all().to_table()
    assert actual_large.equals(expected_large)


@pytest.mark.forward
@pytest.mark.skipif(
    Version(lance.__version__) < Version("0.29.1.beta2"),  # at least 0.29.1-beta.2
    reason="Lance 0.29.1-beta.2 would ignore indices too new",
)
def test_pq_buffer():
    ds = lance.dataset(get_path("pq_in_schema"))
    # the index should be ignored, still able to query (brute force)
    q = pc.random(32).cast(pa.float32())
    ds.to_table(
        nearest={
            "q": q,
            "k": 4,
            "column": "vec",
        }
    )


@pytest.mark.forward
@pytest.mark.skipif(
    Version(lance.__version__) < Version("0.36.0"),
    reason="FTS token set format was introduced in 0.36.0",
)
def test_list_indices_ignores_new_fts_index_version():
    # Dataset::load_manifest does not do retain_supported_indices
    # so this can only work with no cache
    session = lance.Session(index_cache_size_bytes=0, metadata_cache_size_bytes=0)
    ds = lance.dataset(get_path("fts_index"), session=session)
    indices = ds.list_indices()
    # the new index version should be ignored
    assert len(indices) == 0
